{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["DZTITNzwPp8k"],"authorship_tag":"ABX9TyMM0Ybfl+Mxjnnu0LB3SYx7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **BOOTH'S ALGORITHM**"],"metadata":{"id":"IcGeFr8jRcYf"}},{"cell_type":"code","execution_count":5,"metadata":{"id":"BmbE5Zj_EP8M","executionInfo":{"status":"ok","timestamp":1678346222161,"user_tz":-330,"elapsed":826,"user":{"displayName":"Rishi Savla","userId":"00385107173290360740"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":[],"metadata":{"id":"x_UCMI46FGXc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from ctypes import resize\n","## MAIN\n","def booths_algorithm():\n","    #Gets Multiplicand\n","    multiplicand_dec = getInput(\"Mutiplicand\")\n","\n","    #Gets Multiplier\n","    multiplier_dec = getInput(\"Multiplier\")\n","\n","    #Get Register Size\n","    bit_size = int(getInput(\"Register Size\"))\n","\n","    #Converts Multiplicand\n","    multiplicand_bin = convertDec(multiplicand_dec,bit_size)\n","\n","    #Converts Multiplier\n","    multiplier_bin = convertDec(multiplier_dec,bit_size)\n","\n","    #Perform Booth's algorithm\n","    boothsTriumph(multiplicand_bin,multiplier_bin,bit_size)\n","    print(\"Decimal Result: \" + str(int(multiplier_dec)*int(multiplicand_dec)))\n","\n","\n","## Parent function for logical process\n","def boothsTriumph(mcand, plier,rsize):\n","    #Create full product line for Booth's Algorithm\n","    print(\"multipcand: \" + mcand + \" multiplier: \" + plier)\n","    \n","    product = \"\"\n","    for i in range(rsize):\n","      product = product + \"0\"\n","    product = product + plier + \"0\"\n","\n","\n","    print(\"Product: \" + product)\n","    #Display product line to user\n","    print(buildLine(0,mcand,product,rsize))\n","    #Iterate through Booth's Algorithm\n","    for i in range(0,rsize+1):\n","        operation = product[len(product)-2:]\n","        product = perform_operation(product,mcand,operation,rsize)\n","        print(buildLine(i,mcand,product,rsize))\n","    #Print out final value in binary and decimal\n","    product = shift(product)\n","    product = product[rsize+1:2*rsize+1]\n","    print(\"Product: \" + product)\n","    return\n","\n","## Perform the necessary algorithmic operation\n","def perform_operation(product,mcand,operation,rsize):\n","    if operation == \"00\":\n","        product = shift(product)\n","        print(\"No Op\")\n","        return product\n","    elif operation == \"01\":\n","        ##Product = Product + mcand\n","        temp = binAdd(product[0:rsize],mcand)\n","        product = temp + product[rsize:]\n","        product = shift(product)\n","        print(\"Add\")\n","        return product\n","    elif operation == \"10\":\n","        ##Product = Product - mcand\n","        product = subtraction(product,mcand)\n","        product = shift(product)\n","        print(\"Sub\")\n","        return product\n","    elif operation == \"11\":\n","        product = shift(product)\n","        print(\"No Op\")\n","        return product\n","    else:\n","        print(\"An error has occured when choosing operation: Exiting program\")\n","        return 0\n","\n","\n","## Performs Subtraction operation\n","def subtraction(product,mcand):\n","    carry = 0\n","    prime_product = product[:8]\n","    final_product = \"\"\n","    for i in range(len(prime_product)-1,-1,-1):\n","        if (mcand[i] == \"0\" and prime_product[i] == \"0\"):\n","            if (carry == 1):\n","                final_product = \"1\" + final_product\n","            else:\n","                final_product = \"0\" + final_product\n","        elif (mcand[i] == \"1\" and prime_product[i] == \"0\"):\n","            if (carry == 1):\n","                final_product = \"0\" + final_product\n","            else:\n","                final_product = \"1\" + final_product\n","                carry = 1\n","        elif (mcand[i] == \"0\" and prime_product[i] == \"1\"):\n","            if (carry == 1):\n","                final_product = \"0\" + final_product\n","                carry = 0\n","            else:\n","                final_product = \"1\" + final_product\n","        elif (mcand[i] == \"1\" and prime_product[i] == \"1\"):\n","            if (carry == 1):\n","                final_product = \"1\" + final_product\n","                #Again, not sure if this is what really happens to carry\n","                carry = 1\n","            else:\n","                final_product = \"0\" + final_product\n","        else:\n","            print(\"An error has occurred when subtracting: Exiting program\")\n","            return 0\n","\n","\n","    return final_product + product[8:]\n","\n","\n","\n","\n","## Shifts in left\n","def shift(product):\n","    product = \"0\"+product[:len(product)-1]\n","    return product\n","\n","\n","##Adds the two binary strings\n","def binAdd(num, num2):\n","    product = \"\"\n","    carry = \"0\"\n","    for i in range(len(num)-1,-1,-1):\n","        if carry == \"0\":\n","            if num[i] == \"0\" and num2[i] == \"0\":\n","                product = \"0\" + product\n","            elif num[i] == \"1\" and num2[i] == \"1\": #case 1 and 1\n","                product = \"0\" + product\n","                carry = \"1\"\n","            else:\n","                product = \"1\" + product\n","        elif carry == \"1\":\n","            if num[i] == \"0\" and num2[i] == \"0\":\n","                product = \"1\" + product\n","                carry = \"0\"\n","            elif num[i] == \"1\" and num2[i] == \"1\": #case 1 and 1\n","                product = \"1\" + product\n","                carry = \"1\"\n","            else:\n","                product = \"0\" + product\n","                carry = \"1\"\n","    return product\n","\n","## Shows step-by-step process\n","def buildLine(iteration, mcand, product,rsize):\n","    line = \"Step: \" + str(iteration) + \" | Multiplicand: \" + mcand + \" | Product: \" \\\n","    + product[0:rsize] + \" | \" + product[rsize:2*rsize] + \" | \" + product[2*rsize]\n","    return line\n","\n","\n","## Formats numbers from decimal to binary\n","def convertDec(dec):\n","    # If the value is negative, calls twos_complement\n","    if int(dec)<0:\n","        bin = twos_complement(int(dec))\n","    # Else simply converts to binary\n","    else:\n","        bin = \"{0:b}\".format(int(dec))\n","        # Iterates through and makes the binary value 8\n","        for i in range(8-len(bin)):\n","            bin = \"0\" + bin\n","    return bin\n","\n","\n","## Gets input for for algorithm\n","def getInput(varName):\n","    #Request input\n","    boothIn = input('Please enter your ' + varName + \": \")\n","\n","    #Parse input\n","    while int(boothIn)>127 or int(boothIn)<-128:\n","        print(\"Absolute value too big, please try again\")\n","        boothIn = input('Please enter your ' + varName + \": \")\n","    return boothIn\n","\n","\n","## Converts negative numbers\n","def twos_complement(dec):\n","    #Convert to dec, adding 1, then removing negative\n","    adjusted = abs(int(dec) + 1)\n","\n","    #Turns into binary number\n","    binint = \"{0:b}\".format(adjusted)\n","\n","    #Flip bits\n","    flipped = flip(binint)\n","\n","    # Iterates through and makes the binary value 8\n","    for i in range(8-len(flipped)):\n","        flipped = \"1\" + flipped\n","    return flipped\n","\n","\n","\n","## Flips the bits into a string\n","def flip(string):\n","    flipped_string = \"\"\n","\n","    for bit in string:\n","        if bit == \"1\":\n","            flipped_string += \"0\"\n","        else:\n","            flipped_string += \"1\"\n","\n","    return flipped_string\n","\n","\n","## CALL MAIN\n","booths_algorithm()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":375},"id":"HpMFK-sbPknn","outputId":"403d3c5b-549d-46a6-9cc1-d4d4a1475c0d","executionInfo":{"status":"error","timestamp":1678347344190,"user_tz":-330,"elapsed":9739,"user":{"displayName":"Rishi Savla","userId":"00385107173290360740"}}},"execution_count":14,"outputs":[{"name":"stdout","output_type":"stream","text":["Please enter your Mutiplicand: -13\n","Please enter your Multiplier: 6\n","Please enter your Register Size: 5\n"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-2739465a7002>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    211\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m \u001b[0;31m## CALL MAIN\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 213\u001b[0;31m \u001b[0mbooths_algorithm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-14-2739465a7002>\u001b[0m in \u001b[0;36mbooths_algorithm\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;31m#Converts Multiplicand\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m     \u001b[0mmultiplicand_bin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvertDec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiplicand_dec\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbit_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0;31m#Converts Multiplier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: convertDec() takes 1 positional argument but 2 were given"]}]},{"cell_type":"code","source":["6"],"metadata":{"id":"ZqTaaI6lQ0Vq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Rishi**"],"metadata":{"id":"9RckENtSJAP1"}},{"cell_type":"code","source":["def booths_algorithm():\n","     #Gets Multiplicand\n","    multiplicand_dec = getInput(\"Mutiplicand\")\n","\n","    #Gets Multiplier\n","    multiplier_dec = getInput(\"Multiplier\")\n","    \n","    #Gets Bits\n","    rsize = int(getInput(\"Register Size\"))\n","    \n","    #Converts Multiplicand\n","    multiplicand_bin = convertDec(multiplicand_dec,rsize)\n","\n","    #Converts Multiplier\n","    multiplier_bin = convertDec(multiplier_dec,rsize)\n","\n","    #Perform Booth's algorithm\n","    boothsTriumph(multiplicand_bin,multiplier_bin,rsize)\n","    print(\"Decimal Result: \" + str(int(multiplier_dec)*int(multiplicand_dec)))\n","\n","## Parent function for logical process\n","def boothsTriumph(mcand, plier,rsize):\n","    #Create full product line for Booth's Algorithm\n","    print(\"multipcand: \" + mcand + \" multiplier: \" + plier)\n","    product = \"\"\n","    for i in range(rsize):\n","        product += \"0\"\n","    product += plier + \"0\"\n","    print(\"Product: \" + product)\n","    #Display product line to user\n","    print(buildLine(0,mcand,product,rsize))\n","    #Iterate through Booth's Algorithm\n","    for i in range(1,rsize+1):\n","        operation = product[len(product)-2:]\n","        product = perform_operation(product,mcand,operation,rsize)\n","        print(buildLine(i,mcand,product,rsize))\n","    #Print out final value in binary and decimal\n","    product = shift(product)\n","    product = product[rsize+1:(2*rsize)+1]\n","    print(\"Product: \" + product)\n","    return\n","\n","## Perform the necessary algorithmic operation\n","def perform_operation(product,mcand,operation,rsize):\n","    if operation == \"00\":\n","        product = shift(product)\n","        print(\"No Op\")\n","        return product\n","    elif operation == \"01\":\n","        ##Product = Product + mcand\n","        temp = binAdd(product[0:rsize],mcand)\n","        product = temp + product[rsize:]\n","        product = shift(product)\n","        print(\"Add\")\n","        return product\n","    elif operation == \"10\":\n","        ##Product = Product - mcand\n","        product = subtraction(product,mcand,rsize)\n","        product = shift(product)\n","        print(\"Sub\")\n","        return product\n","    elif operation == \"11\":\n","        product = shift(product)\n","        print(\"No Op\")\n","        return product\n","    else:\n","        print(\"An error has occured when choosing operation: Exiting program\")\n","        return 0\n","\n","## Performs Subtraction operation\n","def subtraction(product,mcand,rsize):\n","    carry = 0\n","    prime_product = product[:rsize]\n","    final_product = \"\"\n","    for i in range(len(prime_product)-1,-1,-1):\n","        if (mcand[i] == \"0\" and prime_product[i] == \"0\"):\n","            if (carry == 1):\n","                final_product = \"1\" + final_product\n","            else:\n","                final_product = \"0\" + final_product\n","        elif (mcand[i] == \"1\" and prime_product[i] == \"0\"):\n","            if (carry == 1):\n","                final_product = \"0\" + final_product\n","            else:\n","                final_product = \"1\" + final_product\n","                carry = 1\n","        elif (mcand[i] == \"0\" and prime_product[i] == \"1\"):\n","            if (carry == 1):\n","                final_product = \"0\" + final_product\n","                carry = 0\n","            else:\n","                final_product = \"1\" + final_product\n","        elif (mcand[i] == \"1\" and prime_product[i] == \"1\"):\n","            if (carry == 1):\n","                final_product = \"1\" + final_product\n","                #Again, not sure if this is what really happens to carry\n","                carry = 1\n","            else:\n","                final_product = \"0\" + final_product\n","        else:\n","            print(\"An error has occurred when subtracting: Exiting program\")\n","            return 0\n","    return final_product + product[rsize:]\n","\n","\n","\n","## Shifts in left\n","def shift(product):\n","    product = \"0\"+product[:len(product)-1]\n","    return product\n","\n","\n","\n","\n","##Adds the two binary strings\n","def binAdd(num, num2):\n","    product = \"\"\n","    carry = \"0\"\n","    for i in range(len(num)-1,-1,-1):\n","        if carry == \"0\":\n","            if num[i] == \"0\" and num2[i] == \"0\":\n","                product = \"0\" + product\n","            elif num[i] == \"1\" and num2[i] == \"1\": #case 1 and 1\n","                product = \"0\" + product\n","                carry = \"1\"\n","            else:\n","                product = \"1\" + product\n","        elif carry == \"1\":\n","            if num[i] == \"0\" and num2[i] == \"0\":\n","                product = \"1\" + product\n","                carry = \"0\"\n","            elif num[i] == \"1\" and num2[i] == \"1\": #case 1 and 1\n","                product = \"1\" + product\n","                carry = \"1\"\n","            else:\n","                product = \"0\" + product\n","                carry = \"1\"\n","    return product\n","\n","\n","## Shows step-by-step process\n","def buildLine(iteration, mcand, product,rsize):\n","    line = \"Step: \" + str(iteration) + \" | Multiplicand: \" + mcand + \" | Product: \" \\\n","    + product[0:rsize] + \" | \" + product[rsize:(2*rsize)] + \" | \" + product[(2*rsize)]\n","    return line\n","\n","\n","## Formats numbers from decimal to binary\n","def convertDec(dec,rsize):\n","    # If the value is negative, calls twos_complement\n","    if int(dec)<0:\n","        bin = twos_complement(int(dec),rsize)\n","    # Else simply converts to binary\n","    else:\n","        bin = \"{0:b}\".format(int(dec))\n","        # Iterates through and makes the binary value 8\n","        for i in range(rsize-len(bin)):\n","            bin = \"0\" + bin\n","    return bin\n","\n","\n","## Gets input for for algorithm\n","def getInput(varName):\n","    #Request input\n","    boothIn = input('Please enter your ' + varName + \": \")\n","\n","\n","    #Parse input\n","    while int(boothIn)>127 or int(boothIn)<-128:\n","        print(\"Absolute value too big, please try again\")\n","        boothIn = input('Please enter your ' + varName + \": \")\n","    return boothIn\n","\n","## Converts negative numbers\n","def twos_complement(dec,rsize):\n","    #Convert to dec, adding 1, then removing negative\n","    adjusted = abs(int(dec) + 1)\n","\n","    #Turns into binary number\n","    binint = \"{0:b}\".format(adjusted)\n","\n","    #Flip rsize\n","    flipped = flip(binint)\n","\n","    # Iterates through and makes the binary value 8\n","    for i in range(rsize-len(flipped)):\n","        flipped = \"1\" + flipped\n","    return flipped\n","\n","## Flips the bits into a string\n","def flip(string):\n","    flipped_string = \"\"\n","\n","    for bit in string:\n","        if bit == \"1\":\n","            flipped_string += \"0\"\n","        else:\n","            flipped_string += \"1\"\n","    return flipped_string\n","\n","## CALL MAIN\n","booths_algorithm()"],"metadata":{"id":"48iRBTDOJCju","executionInfo":{"status":"aborted","timestamp":1678345961830,"user_tz":-330,"elapsed":20,"user":{"displayName":"Rishi Savla","userId":"00385107173290360740"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nO-xEyFDJDRa"},"execution_count":null,"outputs":[]}]}