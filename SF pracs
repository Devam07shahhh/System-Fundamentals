{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Bankers"],"metadata":{"id":"VPIGVa1J6ImX"}},{"cell_type":"code","source":["\n","\t# P0, P1, P2, P3, P4 are the Process names here\n","\tn = 5 # Number of processes\n","\tm = 3 # Number of resources\n","\t\n","\t# Allocation Matrix\n","\talloc = [[0, 1, 0 ],[ 2, 0, 0 ],\n","\t\t\t[3, 0, 2 ],[2, 1, 1] ,[ 0, 0, 2]]\n","\t\n","\t# MAX Matrix\n","\tmax = [[7, 5, 3 ],[3, 2, 2 ],\n","\t\t\t[ 9, 0, 2 ],[2, 2, 2],[4, 3, 3]]\n","\t\n","\tavail = [3, 3, 2] # Available Resources\n","\t\n","\tf = [0]*n\n","\tans = [0]*n\n","\tind = 0\n","\tfor k in range(n):\n","\t\tf[k] = 0\n","\t\t\n","\tneed = [[ 0 for i in range(m)]for i in range(n)]\n","\tfor i in range(n):\n","\t\tfor j in range(m):\n","\t\t\tneed[i][j] = max[i][j] - alloc[i][j]\n","\ty = 0\n","\tfor k in range(5):\n","\t\tfor i in range(n):\n","\t\t\tif (f[i] == 0):\n","\t\t\t\tflag = 0\n","\t\t\t\tfor j in range(m):\n","\t\t\t\t\tif (need[i][j] > avail[j]):\n","\t\t\t\t\t\tflag = 1\n","\t\t\t\t\t\tbreak\n","\t\t\t\t\n","\t\t\t\tif (flag == 0):\n","\t\t\t\t\tans[ind] = i\n","\t\t\t\t\tind += 1\n","\t\t\t\t\tfor y in range(m):\n","\t\t\t\t\t\tavail[y] += alloc[i][y]\n","\t\t\t\t\tf[i] = 1\n","\t\t\t\t\t\n","\tprint(\"Following is the SAFE Sequence\")\n","\t\n","\tfor i in range(n - 1):\n","\t\tprint(\" P\", ans[i], \" ->\", sep=\"\", end=\"\")\n","\tprint(\" P\", ans[n - 1], sep=\"\")"],"metadata":{"id":"H43ZTLT46Gk1","executionInfo":{"status":"ok","timestamp":1683826988143,"user_tz":-330,"elapsed":4,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"87becbe1-c9c6-4f35-febe-5dd002bd4723","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Following is the SAFE Sequence\n"," P1 -> P3 -> P4 -> P0 -> P2\n"]}]},{"cell_type":"markdown","source":["28.\tImplement various LRU cache/page replacement policy "],"metadata":{"id":"0kck21uMNUJ_"}},{"cell_type":"code","source":["# Python implementation of above algorithm\n","def pageFaults(pages, n, capacity):\n","\n","\t# To represent set of current pages. We use\n","\t# an unordered_set so that we quickly check\n","\t# if a page is present in set or not\n","\ts = set()\n","\n","\t# To store least recently used indexes\n","\t# of pages.\n","\tindexes = {}\n","\n","\t# Start from initial page\n","\tpage_faults = 0\n","\tfor i in range(n):\n","\n","\t\t# Check if the set can hold more pages\n","\t\tif len(s) < capacity:\n","\n","\t\t\t# Insert it into set if not present\n","\t\t\t# already which represents page fault\n","\t\t\tif pages[i] not in s:\n","\t\t\t\ts.add(pages[i])\n","\n","\t\t\t\t# increment page fault\n","\t\t\t\tpage_faults += 1\n","\n","\t\t\t# Store the recently used index of\n","\t\t\t# each page\n","\t\t\tindexes[pages[i]] = i\n","\n","\t\t# If the set is full then need to perform lru\n","\t\t# i.e. remove the least recently used page\n","\t\t# and insert the current page\n","\t\telse:\n","\n","\t\t\t# Check if current page is not already\n","\t\t\t# present in the set\n","\t\t\tif pages[i] not in s:\n","\n","\t\t\t\t# Find the least recently used pages\n","\t\t\t\t# that is present in the set\n","\t\t\t\tlru = float('inf')\n","\t\t\t\tfor page in s:\n","\t\t\t\t\tif indexes[page] < lru:\n","\t\t\t\t\t\tlru = indexes[page]\n","\t\t\t\t\t\tval = page\n","\n","\t\t\t\t# Remove the indexes page\n","\t\t\t\ts.remove(val)\n","\n","\t\t\t\t# insert the current page\n","\t\t\t\ts.add(pages[i])\n","\n","\t\t\t\t# increment page fault\n","\t\t\t\tpage_faults += 1\n","\n","\t\t\t# Update the current page index\n","\t\t\tindexes[pages[i]] = i\n","\t\t\tprint(s)\n","\n","\treturn page_faults\n","\n","\n","# Driver code\n","pages = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2]\n","n = len(pages)\n","capacity = 4\n","print(\"No of page faults = \",pageFaults(pages, n, capacity))\n","\n","# This code is contributed by ishankhandelwals."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hCvJZVHdRJim","executionInfo":{"status":"ok","timestamp":1683803692977,"user_tz":-330,"elapsed":638,"user":{"displayName":"Vedanta Yadav","userId":"10926238685828944642"}},"outputId":"03951de0-7621-4712-bba5-b5647c53bf97"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{0, 1, 2, 7}\n","{0, 1, 2, 3}\n","{0, 1, 2, 3}\n","{0, 2, 3, 4}\n","{0, 2, 3, 4}\n","{0, 2, 3, 4}\n","{0, 2, 3, 4}\n","{0, 2, 3, 4}\n","{0, 2, 3, 4}\n","No of page faults =  6\n"]}]},{"cell_type":"markdown","source":["29.\tImplement various optimal cache/page replacement policy "],"metadata":{"id":"UT0l29tnNZOs"}},{"cell_type":"code","source":["# Function to check whether a page exists in a frame or not\n","def search(key, fr):\n","\tfor i in range(len(fr)):\n","\t\tif (fr[i] == key):\n","\t\t\treturn True\n","\treturn False\n","\n","# Function to find the frame that will not be used\n","# recently in future after given index in pg[0..pn-1]\n","def predict(pg, fr, pn, index):\n","\tres = -1\n","\tfarthest = index\n","\tfor i in range(len(fr)):\n","\t\tj = 0\n","\t\tfor j in range(index, pn):\n","\t\t\tif (fr[i] == pg[j]):\n","\t\t\t\tif (j > farthest):\n","\t\t\t\t\tfarthest = j\n","\t\t\t\t\tres = i\n","\t\t\t\tbreak\n","\t\t# If a page is never referenced in future, return it.\n","\t\tif (j == pn):\n","\t\t\treturn i\n","\t# If all of the frames were not in future, return any of them, we return 0. Otherwise we return res.\n","\treturn 0 if (res == -1) else res\n","\n","def optimalPage(pg, pn, fn):\n","\n","\t# Create an array for given number of frames and initialize it as empty.\n","\tfr = []\n","\t\n","\t# Traverse through page reference array and check for miss and hit.\n","\thit = 0\n","\tfor i in range(pn):\n","\t\n","\t\t# Page found in a frame : HIT\n","\t\tif search(pg[i], fr):\n","\t\t\thit += 1\n","\t\t\tcontinue\n","\t\t\t\n","\t\t# Page not found in a frame : MISS\n","\t\t# If there is space available in frames.\n","\t\tif len(fr) < fn:\n","\t\t\tfr.append(pg[i])\n","\t\t\t\n","\t\t# Find the page to be replaced.\n","\t\telse:\n","\t\t\tj = predict(pg, fr, pn, i + 1)\n","\t\t\tfr[j] = pg[i]\n","\tprint(\"No. of hits =\", hit)\n","\tprint(\"No. of misses =\", pn-hit)\n","\n","# Driver Code\n","pg = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2]\n","pn = len(pg)\n","fn = 4\n","optimalPage(pg, pn, fn)\n","\n","# This code is contributed by ishankhandelwals."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tPap8kMJUNjJ","executionInfo":{"status":"ok","timestamp":1683718121582,"user_tz":-330,"elapsed":3,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"61116fd8-a3ac-4755-bc2b-05237268edbb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["No. of hits = 4\n","No. of misses = 9\n"]}]},{"cell_type":"markdown","source":["30. Implement various FIFO cache/page replacement policy "],"metadata":{"id":"cNP3dt3zNdfo"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M5gHwygeNPg6","executionInfo":{"status":"ok","timestamp":1683718218338,"user_tz":-330,"elapsed":1482,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"c495e664-6102-4c29-a233-95c54c1b8bbb"},"outputs":[{"output_type":"stream","name":"stdout","text":["No of Page Faults = 7\n"]}],"source":["# Python3 implementation of FIFO page\n","# replacement in Operating Systems.\n","from queue import Queue\n","\n","# Function to find page faults using FIFO\n","def pageFaults(pages, n, capacity):\n","\t\n","\t# To represent set of current pages.\n","\t# We use an unordered_set so that we\n","\t# quickly check if a page is present\n","\t# in set or not\n","\ts = set()\n","\n","\t# To store the pages in FIFO manner\n","\tindexes = Queue()\n","\n","\t# Start from initial page\n","\tpage_faults = 0\n","\tfor i in range(n):\n","\t\t\n","\t\t# Check if the set can hold\n","\t\t# more pages\n","\t\tif (len(s) < capacity):\n","\t\t\t\n","\t\t\t# Insert it into set if not present\n","\t\t\t# already which represents page fault\n","\t\t\tif (pages[i] not in s):\n","\t\t\t\ts.add(pages[i])\n","\n","\t\t\t\t# increment page fault\n","\t\t\t\tpage_faults += 1\n","\n","\t\t\t\t# Push the current page into\n","\t\t\t\t# the queue\n","\t\t\t\tindexes.put(pages[i])\n","\n","\t\t# If the set is full then need to perform FIFO\n","\t\t# i.e. remove the first page of the queue from\n","\t\t# set and queue both and insert the current page\n","\t\telse:\n","\t\t\t\n","\t\t\t# Check if current page is not\n","\t\t\t# already present in the set\n","\t\t\tif (pages[i] not in s):\n","\t\t\t\t\n","\t\t\t\t# Pop the first page from the queue\n","\t\t\t\tval = indexes.queue[0]\n","\n","\t\t\t\tindexes.get()\n","\n","\t\t\t\t# Remove the indexes page\n","\t\t\t\ts.remove(val)\n","\n","\t\t\t\t# insert the current page\n","\t\t\t\ts.add(pages[i])\n","\n","\t\t\t\t# push the current page into\n","\t\t\t\t# the queue\n","\t\t\t\tindexes.put(pages[i])\n","\n","\t\t\t\t# Increment page faults\n","\t\t\t\tpage_faults += 1\n","\n","\treturn page_faults\n","\n","# Driver code\n","if __name__ == '__main__':\n","\tpages = [7, 0, 1, 2, 0, 3, 0,\n","\t\t\t\t4, 2, 3, 0, 3, 2]\n","\tn = len(pages)\n","\tcapacity = 4\n","\tprint(\"No of Page Faults =\",pageFaults(pages, n, capacity))\n","\n","# This code is contributed by PranchalK\n"]},{"cell_type":"markdown","source":["31.\tImplement FCFS CPU scheduling algorithm. "],"metadata":{"id":"Xn4bwoPhNTMZ"}},{"cell_type":"code","source":["import pandas as pd\n","def FCFS(n,process,burst_time,arrival_time):\n","  df = pd.DataFrame(columns = ['process','burst_time','arrival_time','completion_time','turnaround_time','waiting_time'])\n","  for i in range(n):\n","    df['process'] = process\n","    df['burst_time']= burst_time\n","    df['arrival_time'] = arrival_time\n","\n","  df = df.sort_values('arrival_time')\n","  sum =0\n","  for i in range(n):\n","    sum += burst_time[i]\n","    df['completion_time'][i] = sum\n","\n","  df['turnaround_time'] = df['completion_time'] - df['arrival_time']\n","  df['waiting_time'] = df['turnaround_time'] - df['burst_time']\n","\n","  print('Avg waiting time:',df['waiting_time'].mean())\n","  print('\\n\\n')\n","\n","  print(df)\n","\n","p = ['p1','p2','p3']\n","bt = [ 24, 3, 4]\n","at = [0,0,0]\n","n = 3\n","FCFS(n,p,bt,at)"],"metadata":{"id":"1LcnFOhxcXkE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683796953649,"user_tz":-330,"elapsed":1074,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"6e9c2057-e889-4859-a2cd-bba9134b5192"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg waiting time: 17.0\n","\n","\n","\n","  process  burst_time  arrival_time completion_time turnaround_time  \\\n","0      p1          24             0              24              24   \n","1      p2           3             0              27              27   \n","2      p3           4             0              31              31   \n","\n","  waiting_time  \n","0            0  \n","1           24  \n","2           27  \n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-1-9f593a9bbb7d>:13: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['completion_time'][i] = sum\n"]}]},{"cell_type":"markdown","source":["32.\tImplement SJF CPU scheduling algorithm."],"metadata":{"id":"QFmvtM2Veqh0"}},{"cell_type":"code","source":["def SFJ(n,process,burst_time,arrival_time):\n","  df1 = pd.DataFrame(columns = ['process','burst_time','arrival_time','completion_time','turnaround_time','waiting_time','priority'])\n","  for i in range(0,n):\n","    df1['process'] = process\n","    df1['burst_time']= burst_time\n","    df1['arrival_time'] = arrival_time\n","    #df1['priority'] = priority\n","\n","  df1 = df1.sort_values('burst_time')\n","  df1=df1.reset_index()\n","  sum =0\n","  for i in range(n):\n","    sum =sum+ df1['burst_time'][i]\n","    df1['completion_time'][i] = sum\n","\n","  df1['turnaround_time'] = df1['completion_time'] - df1['arrival_time']\n","  df1['waiting_time'] = df1['turnaround_time'] - df1['burst_time']\n","\n","  print('Avg waiting time:',df1['waiting_time'].mean())\n","\n","  print(df1)\n","\n","p = ['p1','p2','p3','p4']\n","bt = [6,7,8,3]\n","at = [0,0,0,0]\n","n = 4\n","SFJ(n,p,bt,at)"],"metadata":{"id":"ozR-LXmUepgn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683798757779,"user_tz":-330,"elapsed":463,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"e827cde1-c273-422f-f79a-956d60bf1a51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Avg waiting time: 7.0\n","   index process  burst_time  arrival_time completion_time turnaround_time  \\\n","0      3      p4           3             0               3               3   \n","1      0      p1           6             0               9               9   \n","2      1      p2           7             0              16              16   \n","3      2      p3           8             0              24              24   \n","\n","  waiting_time priority  \n","0            0      NaN  \n","1            3      NaN  \n","2            9      NaN  \n","3           16      NaN  \n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-2-5c4c6d7d8e13>:14: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df1['completion_time'][i] = sum\n"]}]},{"cell_type":"markdown","source":["33.\tImplement Non Prremptive Priority CPU scheduling algorithm. "],"metadata":{"id":"ydmrmjKrepNX"}},{"cell_type":"code","source":["def priority(n,proc,at,bt,pr):\n","  df2=pd.DataFrame(columns=['proc','at','bt','ct','tt','wt','pr'])\n","  for i in range(0,n):\n","    df2['proc']=proc\n","    df2['at']=at\n","    df2['bt']=bt\n","    df2['pr']=pr\n","\n","  df2=df2.sort_values('pr')\n","  sum=0\n","  for i in range(n):\n","    sum+=df2['bt'][i]\n","    df2['ct'][i]=sum\n","\n","  df2['tt'] = df2['ct'] - df2['at']\n","  df2['wt'] = df2['tt'] - df2['bt']\n","\n","  print('Avg waiting time:',df2['wt'].mean())\n","\n","  print(df2)\n","\n","p = ['p1','p2','p3']\n","bt = [9,4,9]\n","at = [0,0,0]\n","pri = [2,1,3]\n","n = 3\n","priority(n,p,at,bt,pri)"],"metadata":{"id":"8kcxGIEee9zA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["37.\tImplement Best Fit Memory allocation policy. "],"metadata":{"id":"p6fB1SLbesou"}},{"cell_type":"code","source":["# Python3 implementation of Best - Fit algorithm\n","\n","# Function to allocate memory to blocks\n","# as per Best fit algorithm\n","def bestFit(blockSize, m, processSize, n):\n","\t\n","\t# Stores block id of the block\n","\t# allocated to a process\n","\tallocation = [-1] * n\n","\t\n","\t# pick each process and find suitable\n","\t# blocks according to its size ad\n","\t# assign to it\n","\tfor i in range(n):\n","\t\t\n","\t\t# Find the best fit block for\n","\t\t# current process\n","\t\tbestIdx = -1\n","\t\tfor j in range(m):\n","\t\t\tif blockSize[j] >= processSize[i]:\n","\t\t\t\tif bestIdx == -1:\n","\t\t\t\t\tbestIdx = j\n","\t\t\t\telif blockSize[bestIdx] > blockSize[j]:\n","\t\t\t\t\tbestIdx = j\n","\n","\t\t# If we could find a block for\n","\t\t# current process\n","\t\tif bestIdx != -1:\n","\t\t\t\n","\t\t\t# allocate block j to p[i] process\n","\t\t\tallocation[i] = bestIdx\n","\n","\t\t\t# Reduce available memory in this block.\n","\t\t\tblockSize[bestIdx] -= processSize[i]\n","\n","\tprint(\"Process No. Process Size\t Block no.\")\n","\tfor i in range(n):\n","\t\tprint(i + 1, \"\t\t \", processSize[i],\n","\t\t\t\t\t\t\t\tend = \"\t\t \")\n","\t\tif allocation[i] != -1:\n","\t\t\tprint(allocation[i] + 1)\n","\t\telse:\n","\t\t\tprint(\"Not Allocated\")\n","\n","# Driver code\n","if __name__ == '__main__':\n","\tblockSize = [100, 500, 200, 300, 600]\n","\tprocessSize = [212, 417, 112, 426]\n","\tm = len(blockSize)\n","\tn = len(processSize)\n","\n","\tbestFit(blockSize, m, processSize, n)\n","\t\n","# This code is contributed by PranchalK"],"metadata":{"id":"65lPXI1desW2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683722398974,"user_tz":-330,"elapsed":5,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"ddb1fb62-e28d-45b1-f82c-85381ff34491"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Process No. Process Size\t Block no.\n","1 \t\t  212\t\t 4\n","2 \t\t  417\t\t 2\n","3 \t\t  112\t\t 3\n","4 \t\t  426\t\t 5\n"]}]},{"cell_type":"markdown","source":["38.\tImplement First Fit Memory allocation policy. "],"metadata":{"id":"VpcYN8bciYdn"}},{"cell_type":"code","source":["# Python3 implementation of First-Fit algorithm\n","\n","# Function to allocate memory to\n","# blocks as per First fit algorithm\n","def firstFit(blockSize, m, processSize, n):\n","\t\n","\t# Stores block id of the\n","\t# block allocated to a process\n","\tallocation = [-1] * n\n","\n","\t# Initially no block is assigned to any process\n","\n","\t# pick each process and find suitable blocks\n","\t# according to its size ad assign to it\n","\tfor i in range(n):\n","\t\tfor j in range(m):\n","\t\t\tif blockSize[j] >= processSize[i]:\n","\t\t\t\t\n","\t\t\t\t# allocate block j to p[i] process\n","\t\t\t\tallocation[i] = j\n","\n","\t\t\t\t# Reduce available memory in this block.\n","\t\t\t\tblockSize[j] -= processSize[i]\n","\n","\t\t\t\tbreak\n","\n","\tprint(\" Process No. Process Size\t Block no.\")\n","\tfor i in range(n):\n","\t\tprint(\" \", i + 1, \"\t\t \", processSize[i],\n","\t\t\t\t\t\t\"\t\t \", end = \" \")\n","\t\tif allocation[i] != -1:\n","\t\t\tprint(allocation[i] + 1)\n","\t\telse:\n","\t\t\tprint(\"Not Allocated\")\n","\n","# Driver code\n","if __name__ == '__main__':\n","\tblockSize = [100, 500, 200, 300, 600]\n","\tprocessSize = [212, 417, 112, 426]\n","\tm = len(blockSize)\n","\tn = len(processSize)\n","\n","\tfirstFit(blockSize, m, processSize, n)\n","\t\n","# This code is contributed by PranchalK\n"],"metadata":{"id":"tDsIKQQBmRJo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683722401508,"user_tz":-330,"elapsed":3,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"e4ce9028-2d2b-4b28-fb57-f3f5ea228f8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" Process No. Process Size\t Block no.\n","  1 \t\t  212 \t\t  2\n","  2 \t\t  417 \t\t  5\n","  3 \t\t  112 \t\t  2\n","  4 \t\t  426 \t\t  Not Allocated\n"]}]},{"cell_type":"markdown","source":["39.\tImplement Worst Fit Memory allocation policy. "],"metadata":{"id":"uuYqDvkWicXW"}},{"cell_type":"code","source":["# Python3 implementation of worst - Fit algorithm\n","\n","# Function to allocate memory to blocks as\n","# per worst fit algorithm\n","def worstFit(blockSize, m, processSize, n):\n","\t\n","\t# Stores block id of the block\n","\t# allocated to a process\n","\t\n","\t# Initially no block is assigned\n","\t# to any process\n","\tallocation = [-1] * n\n","\t\n","\t# pick each process and find suitable blocks\n","\t# according to its size ad assign to it\n","\tfor i in range(n):\n","\t\t\n","\t\t# Find the best fit block for\n","\t\t# current process\n","\t\twstIdx = -1\n","\t\tfor j in range(m):\n","\t\t\tif blockSize[j] >= processSize[i]:\n","\t\t\t\tif wstIdx == -1:\n","\t\t\t\t\twstIdx = j\n","\t\t\t\telif blockSize[wstIdx] < blockSize[j]:\n","\t\t\t\t\twstIdx = j\n","\n","\t\t# If we could find a block for\n","\t\t# current process\n","\t\tif wstIdx != -1:\n","\t\t\t\n","\t\t\t# allocate block j to p[i] process\n","\t\t\tallocation[i] = wstIdx\n","\n","\t\t\t# Reduce available memory in this block.\n","\t\t\tblockSize[wstIdx] -= processSize[i]\n","\n","\tprint(\"Process No. Process Size Block no.\")\n","\tfor i in range(n):\n","\t\tprint(i + 1, \"\t\t \",\n","\t\t\tprocessSize[i], end = \"\t \")\n","\t\tif allocation[i] != -1:\n","\t\t\tprint(allocation[i] + 1)\n","\t\telse:\n","\t\t\tprint(\"Not Allocated\")\n","\n","# Driver code\n","if __name__ == '__main__':\n","\tblockSize = [100, 500, 200, 300, 600]\n","\tprocessSize = [212, 417, 112, 426]\n","\tm = len(blockSize)\n","\tn = len(processSize)\n","\n","\tworstFit(blockSize, m, processSize, n)\n","\n","# This code is contributed by PranchalK"],"metadata":{"id":"vc0dMqPVicvw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683724811218,"user_tz":-330,"elapsed":407,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"acd5c140-67e0-4f23-ccd4-fcd7bc845140"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Process No. Process Size Block no.\n","1 \t\t  212\t 5\n","2 \t\t  417\t 2\n","3 \t\t  112\t 5\n","4 \t\t  426\t Not Allocated\n"]}]},{"cell_type":"markdown","source":["42.\tImplement FIFO Disk Scheduling Algorithms. "],"metadata":{"id":"Ii7zeOFt60h1"}},{"cell_type":"code","source":["# Python program to demonstrate\n","# FCFS Disk Scheduling algorithm\n","\n","size = 8;\n","\n","def FCFS(arr, head):\n","\n","\tseek_count = 0;\n","\tdistance, cur_track = 0, 0;\n","\n","\tfor i in range(size):\n","\t\tcur_track = arr[i];\n","\n","\t\t# calculate absolute distance\n","\t\tdistance = abs(cur_track - head);\n","\n","\t\t# increase the total count\n","\t\tseek_count += distance;\n","\n","\t\t# accessed track is now new head\n","\t\thead = cur_track;\n","\t\n","\tprint(\"Total number of seek operations = \",\n","\t\t\t\t\t\t\t\tseek_count);\n","\n","\t# Seek sequence would be the same\n","\t# as request array sequence\n","\tprint(\"Seek Sequence is\");\n","\n","\tfor i in range(size):\n","\t\tprint(arr[i]);\n","\t\n","# Driver code\n","if __name__ == '__main__':\n","\n","\t# request array\n","\tarr = [ 176, 79, 34, 60,\n","\t\t\t92, 11, 41, 114 ];\n","\thead = 50;\n","\n","\tFCFS(arr, head);\n","\n","# This code contributed by Rajput-Ji"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_OlcvOrwwsir","executionInfo":{"status":"ok","timestamp":1683729542665,"user_tz":-330,"elapsed":7,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"e7a5bf0c-568b-436c-9e83-29fa8a8eea36"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total number of seek operations =  510\n","Seek Sequence is\n","176\n","79\n","34\n","60\n","92\n","11\n","41\n","114\n"]}]},{"cell_type":"markdown","source":["43.\tImplement SSTF Disk Scheduling Algorithms. "],"metadata":{"id":"KGrbMFJHHtUO"}},{"cell_type":"code","source":["# Python3 program for implementation of\n","# SSTF disk scheduling\n","\n","# Calculates difference of each\n","# track number with the head position\n","def calculateDifference(queue, head, diff):\n","\tfor i in range(len(diff)):\n","\t\tdiff[i][0] = abs(queue[i] - head)\n","\t\n","# find unaccessed track which is\n","# at minimum distance from head\n","def findMin(diff):\n","\n","\tindex = -1\n","\tminimum = 999999999\n","\n","\tfor i in range(len(diff)):\n","\t\tif (not diff[i][1] and\n","\t\t\t\tminimum > diff[i][0]):\n","\t\t\tminimum = diff[i][0]\n","\t\t\tindex = i\n","\treturn index\n","\t\n","def shortestSeekTimeFirst(request, head):\t\t\t\n","\t\tif (len(request) == 0):\n","\t\t\treturn\n","\t\t\n","\t\tl = len(request)\n","\t\tdiff = [0] * l\n","\t\t\n","\t\t# initialize array\n","\t\tfor i in range(l):\n","\t\t\tdiff[i] = [0, 0]\n","\t\t\n","\t\t# count total number of seek operation\t\n","\t\tseek_count = 0\n","\t\t\n","\t\t# stores sequence in which disk\n","\t\t# access is done\n","\t\tseek_sequence = [0] * (l + 1)\n","\t\t\n","\t\tfor i in range(l):\n","\t\t\tseek_sequence[i] = head\n","\t\t\tcalculateDifference(request, head, diff)\n","\t\t\tindex = findMin(diff)\n","\t\t\t\n","\t\t\tdiff[index][1] = True\n","\t\t\t\n","\t\t\t# increase the total count\n","\t\t\tseek_count += diff[index][0]\n","\t\t\t\n","\t\t\t# accessed track is now new head\n","\t\t\thead = request[index]\n","\t\n","\t\t# for last accessed track\n","\t\tseek_sequence[len(seek_sequence) - 1] = head\n","\t\t\n","\t\tprint(\"Total number of seek operations =\",\n","\t\t\t\t\t\t\t\t\tseek_count)\n","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n","\t\tprint(\"Seek Sequence is\")\n","\t\t\n","\t\t# print the sequence\n","\t\tfor i in range(l + 1):\n","\t\t\tprint(seek_sequence[i])\n","\t\n","# Driver code\n","if __name__ ==\"__main__\":\n","\t\n","\t# request array\n","\tproc = [176, 79, 34, 60,\n","\t\t\t92, 11, 41, 114]\n","\tshortestSeekTimeFirst(proc, 50)\n","\t\n","# This code is contributed by\n","# Shubham Singh(SHUBHAMSINGH10)\n"],"metadata":{"id":"YYj8e3u8GeBe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["44.\tImplement SCAN Disk Scheduling Algorithms.  "],"metadata":{"id":"vDD0GA00L3Df"}},{"cell_type":"code","source":["# Python3 program to demonstrate\n","# SCAN Disk Scheduling algorithm\n","size = 8\n","disk_size = 200\n","\n","def SCAN(arr, head, direction):\n","\n","\tseek_count = 0\n","\tdistance, cur_track = 0, 0\n","\tleft = []\n","\tright = []\n","\tseek_sequence = []\n","\n","\t# Appending end values\n","\t# which has to be visited\n","\t# before reversing the direction\n","\tif (direction == \"left\"):\n","\t\tleft.append(0)\n","\telif (direction == \"right\"):\n","\t\tright.append(disk_size - 1)\n","\n","\tfor i in range(size):\n","\t\tif (arr[i] < head):\n","\t\t\tleft.append(arr[i])\n","\t\tif (arr[i] > head):\n","\t\t\tright.append(arr[i])\n","\n","\t# Sorting left and right vectors\n","\tleft.sort()\n","\tright.sort()\n","\n","\t# Run the while loop two times.\n","\t# one by one scanning right\n","\t# and left of the head\n","\trun = 2\n","\twhile (run != 0):\n","\t\tif (direction == \"left\"):\n","\t\t\tfor i in range(len(left) - 1, -1, -1):\n","\t\t\t\tcur_track = left[i]\n","\n","\t\t\t\t# Appending current track to\n","\t\t\t\t# seek sequence\n","\t\t\t\tseek_sequence.append(cur_track)\n","\n","\t\t\t\t# Calculate absolute distance\n","\t\t\t\tdistance = abs(cur_track - head)\n","\n","\t\t\t\t# Increase the total count\n","\t\t\t\tseek_count += distance\n","\n","\t\t\t\t# Accessed track is now the new head\n","\t\t\t\thead = cur_track\n","\t\t\t\n","\t\t\tdirection = \"right\"\n","\t\n","\t\telif (direction == \"right\"):\n","\t\t\tfor i in range(len(right)):\n","\t\t\t\tcur_track = right[i]\n","\t\t\t\t\n","\t\t\t\t# Appending current track to seek\n","\t\t\t\t# sequence\n","\t\t\t\tseek_sequence.append(cur_track)\n","\n","\t\t\t\t# Calculate absolute distance\n","\t\t\t\tdistance = abs(cur_track - head)\n","\n","\t\t\t\t# Increase the total count\n","\t\t\t\tseek_count += distance\n","\n","\t\t\t\t# Accessed track is now new head\n","\t\t\t\thead = cur_track\n","\t\t\t\n","\t\t\tdirection = \"left\"\n","\t\t\n","\t\trun -= 1\n","\n","\tprint(\"Total number of seek operations =\",\n","\t\tseek_count)\n","\n","\tprint(\"Seek Sequence is\")\n","\n","\tfor i in range(len(seek_sequence)):\n","\t\tprint(seek_sequence[i])\n","\n","# Driver code\n","\n","# request array\n","arr = [ 176, 79, 34, 60,\n","\t\t92, 11, 41, 114 ]\n","head = 50\n","direction = \"left\"\n","\n","SCAN(arr, head, direction)\n","\n","# This code is contributed by divyesh072019"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q98ppK4EL22t","executionInfo":{"status":"ok","timestamp":1683747756278,"user_tz":-330,"elapsed":3,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"948d60e6-979a-4c2a-8cac-553dbe2e5609"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total number of seek operations = 226\n","Seek Sequence is\n","41\n","34\n","11\n","0\n","60\n","79\n","92\n","114\n","176\n"]}]},{"cell_type":"markdown","source":["45.\tImplement C-SCAN Disk Scheduling Algorithms.  "],"metadata":{"id":"MiXeGIUKQcaf"}},{"cell_type":"code","source":["# Python3 program to demonstrate\n","# C-SCAN Disk Scheduling algorithm\n","size = 8\n","disk_size = 200\n","\n","\n","def CSCAN(arr, head):\n","\n","\tseek_count = 0\n","\tdistance = 0\n","\tcur_track = 0\n","\tleft = []\n","\tright = []\n","\tseek_sequence = []\n","\n","\t# Appending end values\n","\t# which has to be visited\n","\t# before reversing the direction\n","\tleft.append(0)\n","\tright.append(disk_size - 1)\n","\n","\t# Tracks on the left of the\n","\t# head will be serviced when\n","\t# once the head comes back\n","\t# to the beginning (left end).\n","\tfor i in range(size):\n","\t\tif (arr[i] < head):\n","\t\t\tleft.append(arr[i])\n","\t\tif (arr[i] > head):\n","\t\t\tright.append(arr[i])\n","\n","\t# Sorting left and right vectors\n","\tleft.sort()\n","\tright.sort()\n","\n","\t# First service the requests\n","\t# on the right side of the\n","\t# head.\n","\tfor i in range(len(right)):\n","\t\tcur_track = right[i]\n","\n","\t\t# Appending current track\n","\t\t# to seek sequence\n","\t\tseek_sequence.append(cur_track)\n","\n","\t\t# Calculate absolute distance\n","\t\tdistance = abs(cur_track - head)\n","\n","\t\t# Increase the total count\n","\t\tseek_count += distance\n","\n","\t\t# Accessed track is now new head\n","\t\thead = cur_track\n","\n","\t# Once reached the right end\n","\t# jump to the beginning.\n","\thead = 0\n","\n","\t# adding seek count for head returning from 199 to 0\n","\tseek_count += (disk_size - 1)\n","\n","\t# Now service the requests again\n","\t# which are left.\n","\tfor i in range(len(left)):\n","\t\tcur_track = left[i]\n","\n","\t\t# Appending current track\n","\t\t# to seek sequence\n","\t\tseek_sequence.append(cur_track)\n","\n","\t\t# Calculate absolute distance\n","\t\tdistance = abs(cur_track - head)\n","\n","\t\t# Increase the total count\n","\t\tseek_count += distance\n","\n","\t\t# Accessed track is now the new head\n","\t\thead = cur_track\n","\n","\tprint(\"Total number of seek operations =\",\n","\t\tseek_count)\n","\tprint(\"Seek Sequence is\")\n","\tprint(*seek_sequence, sep=\"\\n\")\n","\n","# Driver code\n","\n","\n","# request array\n","arr = [176, 79, 34, 60,\n","\t92, 11, 41, 114]\n","head = 50\n","\n","print(\"Initial position of head:\", head)\n","\n","CSCAN(arr, head)\n","\n","# This code is contributed by rag2127"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BBeeiK8gL6zD","executionInfo":{"status":"ok","timestamp":1683748948790,"user_tz":-330,"elapsed":871,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"9d7d78e3-ced6-4e58-c6a6-6237c21c32a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Initial position of head: 50\n","Total number of seek operations = 389\n","Seek Sequence is\n","60\n","79\n","92\n","114\n","176\n","199\n","0\n","11\n","34\n","41\n"]}]},{"cell_type":"markdown","source":["46.\tImplement Look Disk Scheduling Algorithms.  "],"metadata":{"id":"GofuHG22R9R3"}},{"cell_type":"code","source":["# Python3 program to demonstrate\n","# LOOK Disk Scheduling algorithm\n","size = 8\n","disk_size = 200\n","\n","def LOOK(arr, head, direction):\n","\t\n","\tseek_count = 0\n","\tdistance = 0\n","\tcur_track = 0\n","\n","\tleft = []\n","\tright = []\n","\n","\tseek_sequence = []\n","\n","\t# Appending values which are\n","\t# currently at left and right\n","\t# direction from the head.\n","\tfor i in range(size):\n","\t\tif (arr[i] < head):\n","\t\t\tleft.append(arr[i])\n","\t\tif (arr[i] > head):\n","\t\t\tright.append(arr[i])\n","\n","\t# Sorting left and right vectors\n","\t# for servicing tracks in the\n","\t# correct sequence.\n","\tleft.sort()\n","\tright.sort()\n","\n","\t# Run the while loop two times.\n","\t# one by one scanning right\n","\t# and left side of the head\n","\trun = 2\n","\twhile (run):\n","\t\tif (direction == \"left\"):\n","\t\t\tfor i in range(len(left) - 1, -1, -1):\n","\t\t\t\tcur_track = left[i]\n","\n","\t\t\t\t# Appending current track to\n","\t\t\t\t# seek sequence\n","\t\t\t\tseek_sequence.append(cur_track)\n","\n","\t\t\t\t# Calculate absolute distance\n","\t\t\t\tdistance = abs(cur_track - head)\n","\n","\t\t\t\t# Increase the total count\n","\t\t\t\tseek_count += distance\n","\n","\t\t\t\t# Accessed track is now the new head\n","\t\t\t\thead = cur_track\n","\n","\t\t\t# Reversing the direction\n","\t\t\tdirection = \"right\"\n","\t\t\t\n","\t\telif (direction == \"right\"):\n","\t\t\tfor i in range(len(right)):\n","\t\t\t\tcur_track = right[i]\n","\n","\t\t\t\t# Appending current track to\n","\t\t\t\t# seek sequence\n","\t\t\t\tseek_sequence.append(cur_track)\n","\n","\t\t\t\t# Calculate absolute distance\n","\t\t\t\tdistance = abs(cur_track - head)\n","\t\t\t\t\n","\t\t\t\t# Increase the total count\n","\t\t\t\tseek_count += distance\n","\n","\t\t\t\t# Accessed track is now new head\n","\t\t\t\thead = cur_track\n","\n","\t\t\t# Reversing the direction\n","\t\t\tdirection = \"left\"\n","\t\t\t\n","\t\trun -= 1\n","\n","\tprint(\"Total number of seek operations =\",\n","\t\tseek_count)\n","\tprint(\"Seek Sequence is\")\n","\n","\tfor i in range(len(seek_sequence)):\n","\t\tprint(seek_sequence[i])\n","\n","# Driver code\n","\n","# Request array\n","arr = [ 176, 79, 34, 60, 92, 11, 41, 114 ]\n","head = 50\n","\n","direction = \"right\"\n","\n","print(\"Initial position of head:\", head)\n","\n","LOOK(arr, head, direction)\n","\n","# This code is contributed by rag2127\n"],"metadata":{"id":"hpqpJR3wQgUt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["47.\tImplement CLook Disk Scheduling Algorithms.  "],"metadata":{"id":"zbG1JDk5SL5v"}},{"cell_type":"code","source":["# Python3 implementation of the approach\n","size = 8\n","disk_size = 200\n","\n","# Function to perform C-LOOK on the request\n","# array starting from the given head\n","def CLOOK(arr, head):\n","\t\n","\tseek_count = 0\n","\tdistance = 0\n","\tcur_track = 0\n","\n","\tleft = []\n","\tright = []\n","\n","\tseek_sequence = []\n","\n","\t# Tracks on the left of the\n","\t# head will be serviced when\n","\t# once the head comes back\n","\t# to the beginning (left end)\n","\tfor i in range(size):\n","\t\tif (arr[i] < head):\n","\t\t\tleft.append(arr[i])\n","\t\tif (arr[i] > head):\n","\t\t\tright.append(arr[i])\n","\n","\t# Sorting left and right vectors\n","\tleft.sort()\n","\tright.sort()\n","\n","\t# First service the requests\n","\t# on the right side of the\n","\t# head\n","\tfor i in range(len(right)):\n","\t\tcur_track = right[i]\n","\t\t\n","\t\t# Appending current track\n","\t\t# seek sequence\n","\t\tseek_sequence.append(cur_track)\n","\n","\t\t# Calculate absolute distance\n","\t\tdistance = abs(cur_track - head)\n","\n","\t\t# Increase the total count\n","\t\tseek_count += distance\n","\n","\t\t# Accessed track is now new head\n","\t\thead = cur_track\n","\n","\t# Once reached the right end\n","\t# jump to the last track that\n","\t# is needed to be serviced in\n","\t# left direction\n","\tseek_count += abs(head - left[0])\n","\thead = left[0]\n","\n","\t# Now service the requests again\n","\t# which are left\n","\tfor i in range(len(left)):\n","\t\tcur_track = left[i]\n","\n","\t\t# Appending current track to\n","\t\t# seek sequence\n","\t\tseek_sequence.append(cur_track)\n","\n","\t\t# Calculate absolute distance\n","\t\tdistance = abs(cur_track - head)\n","\n","\t\t# Increase the total count\n","\t\tseek_count += distance\n","\n","\t\t# Accessed track is now the new head\n","\t\thead = cur_track\n","\n","\tprint(\"Total number of seek operations =\",\n","\t\tseek_count)\n","\tprint(\"Seek Sequence is\")\n","\n","\tfor i in range(len(seek_sequence)):\n","\t\tprint(seek_sequence[i])\n","\n","# Driver code\n","\n","# Request array\n","arr = [ 176, 79, 34, 60,\n","\t\t92, 11, 41, 114 ]\n","head = 50\n","\n","print(\"Initial position of head:\", head)\n","\n","CLOOK(arr, head)\n","\n","# This code is contributed by rag2127\n"],"metadata":{"id":"FZqLHyonSG4p"},"execution_count":null,"outputs":[]}]}