{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMV+mkOgW+ESLOAOSc1fNaz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xVuIQGFQ546i","executionInfo":{"status":"ok","timestamp":1683709634514,"user_tz":-330,"elapsed":13,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"79052bf1-45b1-4da2-d3aa-3552192587f5"},"outputs":[{"output_type":"stream","name":"stdout","text":["qn\tq[n+1]\t\tBR\t\tAC\tQR\t\tsc\n","\t\t\tinitial\t\t0000\t1010\t\t4\n","0\t0\t\trightShift\t0000\t0101\t\t3\n","1\t0\t\tA = A - BR\t1010\n","\t\t\trightShift\t1101\t0010\t\t2\n","0\t0\t\trightShift\t1110\t1001\t\t1\n","1\t0\t\tA = A + BR\t0100\n","\t\t\trightShift\t0010\t0100\t\t0\n","\n","Result = 0100\n"]}],"source":["# Python3 code to implement booth's algorithm\n","\n","# function to perform adding in the accumulator\n","def add(ac, x, qrn):\n","\tc = 0\n","\tfor i in range(qrn):\n","\t\t\n","\t\t# updating accumulator with A = A + BR\n","\t\tac[i] = ac[i] + x[i] + c;\n","\t\t\n","\t\tif (ac[i] > 1):\n","\t\t\tac[i] = ac[i] % 2\n","\t\t\tc = 1\n","\t\t\n","\t\telse:\n","\t\t\tc = 0\n","\n","# function to find the number's complement\n","def complement(a, n):\n","\tx = [0] * 8\n","\tx[0] = 1\n","\t\n","\tfor i in range(n):\n","\t\ta[i] = (a[i] + 1) % 2\n","\tadd(a, x, n)\n","\n","\n","# function to perform right shift\n","def rightShift(ac, qr, qn, qrn):\n","\n","\ttemp = ac[0]\n","\tqn = qr[0]\n","\t\n","\tprint(\"\\t\\trightShift\\t\", end = \"\");\n","\t\n","\tfor i in range(qrn - 1):\n","\t\tac[i] = ac[i + 1]\n","\t\tqr[i] = qr[i + 1]\n","\n","\t\n","\tqr[qrn - 1] = temp\n","\n","\n","# function to display operations\n","def display(ac, qr, qrn):\n","\n","\t# accumulator content\n","\tfor i in range(qrn - 1, -1, -1):\n","\t\tprint(ac[i], end = '')\n","\tprint(\"\\t\", end = '')\n","\n","\t# multiplier content\n","\tfor i in range(qrn - 1, -1, -1):\n","\t\tprint(qr[i], end = \"\")\n","\n","\n","# Function to implement booth's algo\n","def boothAlgorithm(br, qr, mt, qrn, sc):\n","\n","\tqn = 0\n","\tac = [0] * 10\n","\ttemp = 0\n","\tprint(\"qn\\tq[n+1]\\t\\tBR\\t\\tAC\\tQR\\t\\tsc\")\n","\tprint(\"\\t\\t\\tinitial\\t\\t\", end = \"\")\n","\t\n","\tdisplay(ac, qr, qrn)\n","\tprint(\"\\t\\t\", sc, sep = \"\")\n","\t\n","\twhile (sc != 0):\n","\t\tprint(qr[0], \"\\t\", qn, sep = \"\", end = \"\")\n","\t\t\n","\t\t# SECOND CONDITION\n","\t\tif ((qn + qr[0]) == 1):\n","\t\t\n","\t\t\tif (temp == 0):\n","\t\t\t\t\n","\t\t\t\t# subtract BR from accumulator\n","\t\t\t\tadd(ac, mt, qrn)\n","\t\t\t\tprint(\"\\t\\tA = A - BR\\t\", end = \"\")\n","\t\t\t\t\n","\t\t\t\tfor i in range(qrn - 1, -1, -1):\n","\t\t\t\t\tprint(ac[i], end = \"\")\n","\n","\t\t\t\ttemp = 1\n","\t\t\t\n","\t\t\t\n","\t\t\t# THIRD CONDITION\n","\t\t\telif (temp == 1):\n","\t\t\t\n","\t\t\t\t# add BR to accumulator\n","\t\t\t\tadd(ac, br, qrn)\n","\t\t\t\tprint(\"\\t\\tA = A + BR\\t\", end = \"\")\n","\t\t\t\t\n","\t\t\t\tfor i in range(qrn - 1, -1, -1):\n","\t\t\t\t\tprint(ac[i], end = \"\")\n","\t\t\t\ttemp = 0\n","\t\t\t\n","\t\t\tprint(\"\\n\\t\", end = \"\")\n","\t\t\trightShift(ac, qr, qn, qrn)\n","\t\t\n","\t\t# FIRST CONDITION\n","\t\telif (qn - qr[0] == 0):\n","\t\t\trightShift(ac, qr, qn, qrn)\n","\t\t\n","\t\tdisplay(ac, qr, qrn)\n","\t\t\n","\t\tprint(\"\\t\", end = \"\")\n","\t\t\n","\t\t# decrement counter\n","\t\tsc -= 1\n","\t\tprint(\"\\t\", sc, sep = \"\")\n","\n","\n","# driver code\n","def main():\n","\n","\tmt = [0] * 10\n","\t\n","\t# Number of multiplicand bit\n","\tbrn = 4\n","\t\n","\t# multiplicand\n","\tbr = [ 0, 1, 1, 0 ]\n","\t\n","\t# copy multiplier to temp array mt[]\n","\tfor i in range(brn - 1, -1, -1):\n","\t\tmt[i] = br[i]\n","\t\n","\tbr.reverse()\n","\n","\tcomplement(mt, brn)\n","\n","\t# No. of multiplier bit\n","\tqrn = 4\n","\t\n","\t# sequence counter\n","\tsc = qrn\n","\t\n","\t# multiplier\n","\tqr = [ 1, 0, 1, 0 ]\n","\tqr.reverse()\n","\n","\tboothAlgorithm(br, qr, mt, qrn, sc)\n","\t\n","\tprint(\"\\nResult = \", end = \"\")\n","\n","\tfor i in range(qrn - 1, -1, -1):\n","\t\tprint(qr[i], end = \"\")\n","\tprint()\n","\t\t\n","main()\n","\n","\n","#This code is contributed by phasing17\n"]},{"cell_type":"code","source":[],"metadata":{"id":"ox5ZYn2c55XD"},"execution_count":null,"outputs":[]}]}