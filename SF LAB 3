{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**SRTF**\n"],"metadata":{"id":"EXjglTRMrpQV"}},{"cell_type":"code","source":["\n","def findWaitingTime(processes, n, wt):\n","\trt = [0] * n\n","\n","\tfor i in range(n):\n","\t\trt[i] = processes[i][1]\n","\tcomplete = 0\n","\tt = 0\n","\tminm = 999999999\n","\tshort = 0\n","\tcheck = False\n","\n","\twhile (complete != n):\n","\t\t\n","\n","\t\tfor j in range(n):\n","\t\t\tif ((processes[j][2] <= t) and\n","\t\t\t\t(rt[j] < minm) and rt[j] > 0):\n","\t\t\t\tminm = rt[j]\n","\t\t\t\tshort = j\n","\t\t\t\tcheck = True\n","\t\tif (check == False):\n","\t\t\tt += 1\n","\t\t\tcontinue\n","\t\t\t\n","\t\trt[short] -= 1\n","\n","\t\tminm = rt[short]\n","\t\tif (minm == 0):\n","\t\t\tminm = 999999999\n","\n","\t\tif (rt[short] == 0):\n","\n","\t\t\tcomplete += 1\n","\t\t\tcheck = False\n","\n","\t\t\tfint = t + 1\n","\n","\t\t\twt[short] = (fint - proc[short][1] -\n","\t\t\t\t\t\t\t\tproc[short][2])\n","\n","\t\t\tif (wt[short] < 0):\n","\t\t\t\twt[short] = 0\n","\t\t\n","\t\t# Increment time\n","\t\tt += 1\n","\n","def findTurnAroundTime(processes, n, wt, tat):\n","\t\n","\tfor i in range(n):\n","\t\ttat[i] = processes[i][1] + wt[i]\n","\n","def findavgTime(processes, n):\n","\twt = [0] * n\n","\ttat = [0] * n\n","\n","\tfindWaitingTime(processes, n, wt)\n","\n","\tfindTurnAroundTime(processes, n, wt, tat)\n","\n","\tprint(\"Processes Burst Time\t Waiting\",\n","\t\t\t\t\t\"Time\t Turn-Around Time\")\n","\ttotal_wt = 0\n","\ttotal_tat = 0\n","\tfor i in range(n):\n","\n","\t\ttotal_wt = total_wt + wt[i]\n","\t\ttotal_tat = total_tat + tat[i]\n","\t\tprint(\" \", processes[i][0], \"\\t\\t\",\n","\t\t\t\tprocesses[i][1], \"\\t\\t\",\n","\t\t\t\twt[i], \"\\t\\t\", tat[i])\n","\n","\tprint(\"\\nAverage waiting time = %.5f \"%(total_wt /n) )\n","\tprint(\"Average turn around time = \", total_tat / n)\n","\n","if __name__ ==\"__main__\":\n","\t\n","\t# Process id's\n","\tproc = [[1, 7, 0], [2, 5, 1],\n","\t\t\t[3, 3, 2], [4, 1, 3],[5,2,4],[6,1,4]]\n","\tn = 6\n","\tfindavgTime(proc, n)\n","\n"],"metadata":{"id":"JEngNCplddhH","executionInfo":{"status":"ok","timestamp":1683190095176,"user_tz":-330,"elapsed":1788,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"48f4cc52-5766-4c55-ee28-a316f9473014"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Processes Burst Time\t Waiting Time\t Turn-Around Time\n","  1 \t\t 7 \t\t 12 \t\t 19\n","  2 \t\t 5 \t\t 7 \t\t 12\n","  3 \t\t 3 \t\t 2 \t\t 5\n","  4 \t\t 1 \t\t 0 \t\t 1\n","  5 \t\t 2 \t\t 3 \t\t 5\n","  6 \t\t 1 \t\t 0 \t\t 1\n","\n","Average waiting time = 4.00000 \n","Average turn around time =  7.166666666666667\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"psYhNeJBsqM4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Round Robin**"],"metadata":{"id":"Udw8vjEcsrlB"}},{"cell_type":"code","source":["def findWaitingTime(processes, n, bt,\twt, quantum):\n","\trem_bt = [0] * n\n","\n","\tfor i in range(n):\n","\t\trem_bt[i] = bt[i]\n","\tt = 0 # Current time\n","\n","\twhile(1):\n","\t\tdone = True\n","\n","\t\tfor i in range(n):\n","\t\t\t\n","\t\t\tif (rem_bt[i] > 0) :\n","\t\t\t\tdone = False \n","\t\t\t\t\n","\t\t\t\tif (rem_bt[i] > quantum) :\n","\t\t\t\t\n","\t\t\t\t\tt += quantum\n","\n","\t\t\t\t\trem_bt[i] -= quantum\n","\t\t\t\t\n","\t\t\t\telse:\n","\t\t\t\t\n","\t\t\t\t\tt = t + rem_bt[i]\n","\n","\t\t\t\t\twt[i] = t - bt[i]\n","\n","\t\t\t\t\trem_bt[i] = 0\n","\t\t\t\t\n","\n","\t\tif (done == True):\n","\t\t\tbreak\n","\n","def findTurnAroundTime(processes, n, bt, wt, tat):\n","\n","\tfor i in range(n):\n","\t\ttat[i] = bt[i] + wt[i]\n","\n","\n","def findavgTime(processes, n, bt, quantum):\n","\twt = [0] * n\n","\ttat = [0] * n\n","\n","\tfindWaitingTime(processes, n, bt,\n","\t\t\t\t\t\twt, quantum)\n","\n","\tfindTurnAroundTime(processes, n, bt,\n","\t\t\t\t\t\t\t\twt, tat)\n","\n","\tprint(\"Processes Burst Time\t Waiting\",\n","\t\t\t\t\t\"Time Turn-Around Time\")\n","\ttotal_wt = 0\n","\ttotal_tat = 0\n","\tfor i in range(n):\n","\n","\t\ttotal_wt = total_wt + wt[i]\n","\t\ttotal_tat = total_tat + tat[i]\n","\t\tprint(\" \", i + 1, \"\\t\\t\", bt[i],\n","\t\t\t\"\\t\\t\", wt[i], \"\\t\\t\", tat[i])\n","\n","\tprint(\"\\nAverage waiting time = %.5f \"%(total_wt /n) )\n","\tprint(\"Average turn around time = %.5f \"% (total_tat / n))\n","\t\n","\n","if __name__ ==\"__main__\":\n","\t\n","\t# Process id's\n","\tproc = [1, 2, 3]\n","\tn = 3\n","\n","\tburst_time = [9,4,9]\n","\n","\tquantum = 2;\n","\tfindavgTime(proc, n, burst_time, quantum)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b44GNb2YsqPP","executionInfo":{"status":"ok","timestamp":1683190095177,"user_tz":-330,"elapsed":4,"user":{"displayName":"Devam Shahhh","userId":"10431202123068889553"}},"outputId":"d1e4f298-3951-47aa-c6aa-9b339499bfaf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Processes Burst Time\t Waiting Time Turn-Around Time\n","  1 \t\t 9 \t\t 12 \t\t 21\n","  2 \t\t 4 \t\t 6 \t\t 10\n","  3 \t\t 9 \t\t 13 \t\t 22\n","\n","Average waiting time = 10.33333 \n","Average turn around time = 17.66667 \n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"7lPEwZ5TsqSn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Preemptive Priority**"],"metadata":{"id":"IXVgTzEztg4A"}},{"cell_type":"code","source":["def findWaitingTime(processes, n, wt):\n","    rt = [0] * n\n"," \n","    for i in range(n):\n","        rt[i] = processes[i][1]\n"," \n","    complete = 0\n","    t = 0\n","    minm = 999999999\n","    short = 0\n","    check = False\n"," \n","    while (complete != n):\n","        for j in range(n):\n","            if ((processes[j][2] <= t) and\n","                (rt[j] < minm) and rt[j] > 0):\n","                minm = rt[j]\n","                short = j\n","                check = True\n","        if (check == False):\n","            t += 1\n","            continue\n"," \n","        rt[short] -= 1\n","        minm = rt[short]\n","        if (minm == 0):\n","            minm = 999999999\n"," \n","        if (rt[short] == 0):\n","            complete += 1\n","            check = False\n","            fint = t + 1\n","            wt[short] = (fint - processes[short][1] - processes[short][2])\n"," \n","            if (wt[short] < 0):\n","                wt[short] = 0\n"," \n","        t += 1\n"," \n","def findTurnAroundTime(processes, n, wt, tat):\n","    for i in range(n):\n","        tat[i] = processes[i][1] + wt[i]\n"," \n","def findavgTime(processes, n):\n","    wt = [0] * n\n","    tat = [0] * n\n","    findWaitingTime(processes, n, wt)\n","    findTurnAroundTime(processes, n, wt, tat)\n","    print(\"\\nProcesses Burst Time Arrival Time Waiting Time Turn-Around Time\")\n","    total_wt = 0\n","    total_tat = 0\n","    for i in range(n):\n","        total_wt = total_wt + wt[i]\n","        total_tat = total_tat + tat[i]\n","        print(\" \", processes[i][0], \"\\t\\t\", processes[i][1], \"\\t\\t\", processes[i][2], \"\\t\\t\", wt[i], \"\\t\\t\", tat[i])\n"," \n","    print(\"\\nAverage waiting time = %.5f \"%(total_wt /n))\n","    print(\"Average turn around time = %.5f \"%(total_tat / n))\n"," \n","def priorityScheduling(proc, n):\n","    proc = sorted(proc, key = lambda proc:proc[2])\n","    findavgTime(proc, n)\n"," \n","if __name__ == \"_main_\":\n","    n = int(input(\"Enter the number of processes: \"))\n","    proc = []\n","    for i in range(n):\n","        p_id = i+1\n","        burst_time = int(input(f\"Enter the burst time for process {p_id}: \"))\n","        arrival_time = int(input(f\"Enter the arrival time for process {p_id}: \"))\n","        priority = int(input(f\"Enter the priority for process {p_id}: \"))\n","        proc.append([p_id, burst_time, arrival_time, priority])\n","    priorityScheduling(proc, n)\n","\n"],"metadata":{"id":"5J5GvoEytsom"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"vPfZRiKuuDOy"},"execution_count":null,"outputs":[]}]}